// Code generated by go-swagger; DO NOT EDIT.

package pool

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// QuerryPoolHandlerFunc turns a function with the right signature into a querry pool handler
type QuerryPoolHandlerFunc func(QuerryPoolParams) middleware.Responder

// Handle executing the request and returning a response
func (fn QuerryPoolHandlerFunc) Handle(params QuerryPoolParams) middleware.Responder {
	return fn(params)
}

// QuerryPoolHandler interface for that can handle valid querry pool params
type QuerryPoolHandler interface {
	Handle(QuerryPoolParams) middleware.Responder
}

// NewQuerryPool creates a new http.Handler for the querry pool operation
func NewQuerryPool(ctx *middleware.Context, handler QuerryPoolHandler) *QuerryPool {
	return &QuerryPool{Context: ctx, Handler: handler}
}

/* QuerryPool swagger:route POST /api/pools/query pool querryPool

insert/append values to pools

*/
type QuerryPool struct {
	Context *middleware.Context
	Handler QuerryPoolHandler
}

func (o *QuerryPool) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewQuerryPoolParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
