// Code generated by go-swagger; DO NOT EDIT.

package pool

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// InsertPoolHandlerFunc turns a function with the right signature into a insert pool handler
type InsertPoolHandlerFunc func(InsertPoolParams) middleware.Responder

// Handle executing the request and returning a response
func (fn InsertPoolHandlerFunc) Handle(params InsertPoolParams) middleware.Responder {
	return fn(params)
}

// InsertPoolHandler interface for that can handle valid insert pool params
type InsertPoolHandler interface {
	Handle(InsertPoolParams) middleware.Responder
}

// NewInsertPool creates a new http.Handler for the insert pool operation
func NewInsertPool(ctx *middleware.Context, handler InsertPoolHandler) *InsertPool {
	return &InsertPool{Context: ctx, Handler: handler}
}

/*InsertPool swagger:route POST /api/pools/add pool insertPool

insert/append values to pools

*/
type InsertPool struct {
	Context *middleware.Context
	Handler InsertPoolHandler
}

func (o *InsertPool) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewInsertPoolParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
